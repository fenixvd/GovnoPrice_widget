package com.fenixvd.govnowidget

import android.appwidget.AppWidgetManager
import android.content.ComponentName
import android.content.Context
import android.widget.RemoteViews
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.Request
import org.json.JSONObject
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class UpdateWorker(context: Context, params: WorkerParameters) : CoroutineWorker(context, params) {

    override suspend fun doWork(): Result {
        return try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            val poolData = NetworkUtils.fetchPoolData()
            if (poolData != null) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç
                val appWidgetManager = AppWidgetManager.getInstance(applicationContext)
                val componentName = ComponentName(applicationContext, MyWidgetProvider::class.java)
                val appWidgetIds = appWidgetManager.getAppWidgetIds(componentName)

                // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD
                val usdPrice = formatUsdPrice(poolData.data.attributes.base_token_price_usd)

                // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å —Ä—É–±–ª—è (–∏–ª–∏ –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç—ã)
                val usdToRubRate = fetchUsdToRubRate() // –ö—É—Ä—Å USD –∫ RUB
                val rubPrice = formatRubPrice(poolData.data.attributes.base_token_price_usd, usdToRubRate)

                // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                val change = poolData.data.attributes.price_change_percentage.h24
                val changeIcon = getChangeIcon(change)
                val changeColor = getChangeColor(change)

                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                val currentDateTime = getCurrentDateTime()

                // –°–æ–∑–¥–∞–µ–º RemoteViews –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç
                val views = RemoteViews(applicationContext.packageName, R.layout.widget_layout).apply {
                    setTextViewText(R.id.ticker, "GOVNO")
                    setTextViewText(R.id.price, "$$usdPrice")
                    setTextViewText(R.id.price_rub, "$rubPrice ‚ÇΩ")
                    setTextViewText(R.id.change, "$changeIcon $change%")
                    setTextColor(R.id.change, changeColor) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                    setTextViewText(R.id.time, "Updated $currentDateTime")
                    setTextViewText(R.id.icon, "üí©")
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –≤–∏–¥–∂–µ—Ç–∞
                withContext(Dispatchers.Main) {
                    appWidgetIds.forEach { widgetId ->
                        appWidgetManager.updateAppWidget(widgetId, views)
                    }
                }

                Result.success()
            } else {
                Result.failure()
            }
        } catch (e: Exception) {
            Result.failure()
        }
    }

    private fun formatUsdPrice(price: String): String {
        return try {
            val number = price.toDouble()
            "%.2f".format(number)
        } catch (e: Exception) {
            "0.00"
        }
    }

    private fun formatRubPrice(usdPrice: String, usdToRubRate: Double): String {
        return try {
            // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            val normalizedPrice = usdPrice.replace(",", ".")
            val number = normalizedPrice.toDouble() // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∏–∑ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª–∏
            val rubPrice = number * usdToRubRate

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ç—Ä–µ–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            "%.3f".format(rubPrice)
        } catch (e: Exception) {
            "0.000"
        }
    }

    private suspend fun fetchUsdToRubRate(): Double {
        return try {
            val client = OkHttpClient()
            val request = Request.Builder()
                .url("https://www.cbr-xml-daily.ru/daily_json.js") // API –¶–ë –†–§
                .build()

            val response = client.newCall(request).execute()
            val responseBody = response.body?.string()

            if (response.isSuccessful && !responseBody.isNullOrEmpty()) {
                val json = JSONObject(responseBody)
                val usdRate = json.getJSONObject("Valute").getJSONObject("USD").getDouble("Value")
                usdRate
            } else {
                98.0 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            }
        } catch (e: Exception) {
            98.0 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    private fun getChangeIcon(change: String): String {
        return try {
            val changeValue = change.toDouble()
            if (changeValue >= 0) "‚¨Ü" else "‚¨á"
        } catch (e: Exception) {
            "‚¨Ü"
        }
    }

    private fun getChangeColor(change: String): Int {
        return try {
            val changeValue = change.toDouble()
            if (changeValue >= 0) {
                0xFF4CAF50.toInt() // –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç
            } else {
                0xFFF44336.toInt() // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
            }
        } catch (e: Exception) {
            0xFFF44336.toInt() // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    private fun getCurrentDateTime(): String {
        val sdf = SimpleDateFormat("HH:mm dd.MM.yyyy", Locale.getDefault())
        return sdf.format(Date())
    }
}