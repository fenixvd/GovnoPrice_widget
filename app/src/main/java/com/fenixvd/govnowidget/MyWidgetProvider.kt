package com.fenixvd.govnowidget

import android.app.PendingIntent
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProvider
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.widget.RemoteViews
import androidx.work.ExistingPeriodicWorkPolicy
import androidx.work.PeriodicWorkRequest
import androidx.work.WorkManager
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.Request
import org.json.JSONObject
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.concurrent.TimeUnit

internal class MyWidgetProvider : AppWidgetProvider() {

    override fun onUpdate(context: Context, appWidgetManager: AppWidgetManager, appWidgetIds: IntArray) {
        super.onUpdate(context, appWidgetManager, appWidgetIds)
        updateWidget(context, appWidgetManager, appWidgetIds)
        scheduleUpdateWorker(context)
    }

    private fun scheduleUpdateWorker(context: Context) {
        val workManager = WorkManager.getInstance(context)

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        val updateWorkRequest = PeriodicWorkRequest.Builder(
            UpdateWorker::class.java,
            1, TimeUnit.MINUTES
        ).build()

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        workManager.enqueueUniquePeriodicWork(
            "UpdateWidgetWork",
            ExistingPeriodicWorkPolicy.KEEP,
            updateWorkRequest
        )
    }

    override fun onReceive(context: Context, intent: Intent) {
        super.onReceive(context, intent)
        if (intent.action == "com.fenixvd.govnowidget.ACTION_UPDATE") {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –≤—Ä—É—á–Ω—É—é
            val appWidgetManager = AppWidgetManager.getInstance(context)
            val appWidgetIds = appWidgetManager.getAppWidgetIds(
                ComponentName(context, MyWidgetProvider::class.java)
            )
            updateWidget(context, appWidgetManager, appWidgetIds)
        }
    }

    private fun updateWidget(context: Context, appWidgetManager: AppWidgetManager, appWidgetIds: IntArray) {
        CoroutineScope(Dispatchers.IO).launch {
            val poolData = NetworkUtils.fetchPoolData()
            if (poolData != null) {
                val usdPrice = formatUsdPrice(poolData.data.attributes.base_token_price_usd)
                val usdToRubRate = fetchUsdToRubRate() // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é
                val rubPrice = formatRubPrice(poolData.data.attributes.base_token_price_usd, usdToRubRate)
                val change = poolData.data.attributes.price_change_percentage.h24
                val changeIcon = getChangeIcon(change)
                val changeColor = getChangeColor(change) // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è —Å—Ç—Ä–µ–ª–æ—á–∫–∏
                val currentDateTime = getCurrentDateTime()

                withContext(Dispatchers.Main) {
                    val views = RemoteViews(context.packageName, R.layout.widget_layout).apply {
                        setTextViewText(R.id.ticker, "GOVNO")
                        setTextViewText(R.id.price, "$$usdPrice")
                        setTextViewText(R.id.price_rub, "$rubPrice ‚ÇΩ") // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        setTextViewText(R.id.change, "$changeIcon $change%")
                        setTextColor(R.id.change, changeColor) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω—ã
                        setTextViewText(R.id.time, "Updated $currentDateTime")
                        setTextViewText(R.id.icon, "üí©")
                    }

                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PendingIntent –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    setUpdateOnClick(context, views)

                    appWidgetIds.forEach { widgetId ->
                        appWidgetManager.updateAppWidget(widgetId, views)
                    }
                }
            }
        }
    }

    private fun setUpdateOnClick(context: Context, views: RemoteViews) {
        // –°–æ–∑–¥–∞–µ–º Intent –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
        val intent = Intent(context, MyWidgetProvider::class.java).apply {
            action = "com.fenixvd.govnowidget.ACTION_UPDATE" // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        }

        // –°–æ–∑–¥–∞–µ–º PendingIntent
        val pendingIntent = PendingIntent.getBroadcast(
            context,
            0,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        // –ù–∞–∑–Ω–∞—á–∞–µ–º PendingIntent –Ω–∞ –∫–Ω–æ–ø–∫—É
        views.setOnClickPendingIntent(R.id.icon, pendingIntent)
    }

    private fun formatUsdPrice(price: String): String {
        return try {
            val number = price.toDouble()
            "%.2f".format(number)
        } catch (e: Exception) {
            "0.00"
        }
    }

    private fun formatRubPrice(usdPrice: String, usdToRubRate: Double): String {
        return try {
            // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            val normalizedPrice = usdPrice.replace(",", ".")
            val number = normalizedPrice.toDouble() // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∏–∑ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª–∏
            val rubPrice = number * usdToRubRate

            "%.3f".format(rubPrice)
        } catch (e: Exception) {
            "0.000"
        }
    }

    private suspend fun fetchUsdToRubRate(): Double {
        return try {
            val client = OkHttpClient()
            val request = Request.Builder()
                .url("https://www.cbr-xml-daily.ru/daily_json.js") // API –¶–ë –†–§
                .build()

            val response = client.newCall(request).execute()
            val responseBody = response.body?.string()

            if (response.isSuccessful && !responseBody.isNullOrEmpty()) {
                val json = JSONObject(responseBody)
                val usdRate = json.getJSONObject("Valute").getJSONObject("USD").getDouble("Value")
                usdRate
            } else {
                98.0 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            }
        } catch (e: Exception) {
            98.0 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    private fun getChangeIcon(change: String): String {
        return try {
            val changeValue = change.toDouble()
            if (changeValue >= 0) "‚¨Ü" else "‚¨á"
        } catch (e: Exception) {
            "‚¨Ü"
        }
    }

    private fun getChangeColor(change: String): Int {
        return try {
            val changeValue = change.toDouble()
            if (changeValue >= 0) {
                0xFF4CAF50.toInt() // –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç
            } else {
                0xFFF44336.toInt() // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
            }
        } catch (e: Exception) {
            0xFFF44336.toInt() // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    private fun getCurrentDateTime(): String {
        val sdf = SimpleDateFormat("HH:mm dd.MM.yyyy", Locale.getDefault())
        return sdf.format(Date())
    }
}